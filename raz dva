def func1(arg1, arg2):
    var3 = func4()
    if arg1 < var3:
        var8 = class5()
    else:
        var8 = class7()
    for var9 in range(32):
        var8.func6(var3, arg1)
    var15 = func9(var3, arg2)
    var31 = var18(arg1, var3)
    var32 = var3 - 218
    if var3 < var3:
        var33 = ((arg2 | 12) + arg2) ^ var3
    else:
        var33 = var32 + (var15 + var31) + var32
    var34 = ((var3 ^ var31) + -777744974) - arg2
    var35 = -512 ^ var15
    var36 = (-916 + -1423622129 | var15) + var3
    var37 = 622152536 | arg2
    if var37 < var31:
        var38 = (var32 & (-479 + -1576479693)) - var15
    else:
        var38 = (arg2 + var31) & arg2
    var39 = var15 + (var15 & arg1) & var31
    var40 = var37 & 316
    var41 = var3 | var40
    result = var32 - var39
    return result
def func12(arg19, arg20):
    var21 = arg20 ^ 120004436 & arg19 | -285
    var22 = (arg20 - arg20) - var21 + arg20
    if var21 < arg19:
        var23 = arg20 - (-290 ^ var21) - -421
    else:
        var23 = ((arg20 ^ 262) - var22) | -43
    var24 = arg19 & (arg20 & arg19) + -364
    var25 = var24 + var22
    var26 = (arg19 - (arg19 ^ var24)) | -146
    var27 = arg20 & (arg19 | var21)
    var28 = (var26 & arg20) & var25 - var22
    var29 = (var21 & (var24 ^ var25)) & arg19
    var30 = -181 & var22
    result = ((arg20 & (var28 & arg19) & var22 ^ var26 - var25 ^ 16 + var29 ^ -515611458) | var25) - var27 ^ var22
    return result
def func11():
    closure = [6]
    def func10(arg16, arg17):
        closure[0] += func12(arg16, arg17)
        return closure[0]
    func = func10
    return func
var18 = func11()
def func9(arg10, arg11):
    var12 = arg11 ^ -185515527
    var13 = 563 - (var12 - -751) & -186 + (arg11 | (-1029767722 ^ arg10 + (arg11 + (arg10 | ((473 & ((-727525050 + arg10) & arg10 ^ arg10)) | arg11 | -965321280 - arg10 - 774 - var12))) | -1207249279) | -260) + 1791582691
    var14 = var13 - arg11 & -392087498
    result = -913 | (var12 & (var12 + arg11 + arg10 ^ var14 - -1271357520 | var13) - var14 | arg11) | var14 - 979
    return result
class class7(object):
    def func6(self, arg6, arg7):
        return 0
class class5(object):
    def func6(self, arg4, arg5):
        return 0
def func4():
    func2()
    result = len(((4 - 2 & -5) - -6 - -6 ^ i | i ^ 2 for i in xrange(24)))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 1
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 42'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
